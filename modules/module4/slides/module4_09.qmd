---
format: revealjs
title: Finding the Nearest Neighbour
title-slide-attributes:
  data-notes: |
    Now that we know how to calculate the distance between two points, we are ready to find the most similar examples. 
---

```{python}
#  | echo: false
%run src/utils.py
```

```{python}
cities_df = pd.read_csv("data/canada_usa_cities.csv")
train_df, test_df = train_test_split(cities_df, test_size=0.2, random_state=123)
train_df.head(3)
```

<br>

```{python}
# | include: false
import numpy as np
np.set_printoptions(edgeitems=2)
```
```{python}
from sklearn.metrics.pairwise import euclidean_distances
dists = euclidean_distances(train_df[["latitude", "longitude"]])
dists
```

<br>
```{python}
dists.shape
```

:::{.notes} 
Let's look at the distances from all the cities to all other cities in our training portion of our city's data. 

This is going to be of shape 167 by 167 as this was the number of examples in our training portion.

Each row here gives us the distance of that particular city to all other cities in the training data. 
:::

---


```{python}
pd.DataFrame(dists).loc[:5,:5]
```

<br>

```{python}
np.fill_diagonal(dists, np.inf)
pd.DataFrame(dists).loc[:5,:5]
```


:::{.notes} 
Note that we are replacing these diagonal entries by infinity in the matrix.

The distance of each city to itself is going to be zero. 

If we don't replace 0 with infinity, each city’s most similar city is going to be itself which is not useful. 
:::

---

Feature vector for city 0:

```{python}
train_df.iloc[0]
```

<br>

Distances from city 0 to 5 other cities:

```{python}
dists[0][:5]
```


:::{.notes} 
Now let's look at the distance between city 0 and some other cities. 

We can look at city 0 with its respective `longitude` and `latitude` values. 

Here, we are printing the distances from city 0 to 5 other cities in the training dataset.

Remember that our goal is to find the closest example. 

So, in our case, we want to find the closest example to city 0. 

We can find the closest city to city 0 by finding the city with the minimum distance. 
:::

---

```{python}
train_df.iloc[[0]]
```

<br>

```{python}
np.argmin(dists[0])
```

<br>

```{python}
train_df.iloc[[157]]
```

<br>

```{python}
dists[0][157]
```


:::{.notes} 
So, we take <a href="https://numpy.org/doc/stable/reference/generated/numpy.argmin.html" target="_blank">`np.argmin`</a> to find the city with the minimum distance from city 0. 

The closest city in our case turned out to be the city with index 157 from our training dataset ( this corresponds to the index 96 from the original dataset before shuffling).

If we look at the `longitude` and `latitude` values for the city at index 157 (labeled 96), they look pretty close to those of city 0. 

So, in this case, the closest city to city 0 is city 157 and the Euclidean distance between the two cities is 0.184. 
:::

---

## Finding the distances to a query point

```{python}
query_point = [[-80, 25]]

dists = euclidean_distances(train_df[["longitude", "latitude"]], query_point)
dists[0:5]
```

<br>

We can find the city closest to the query point (-80, 25) using:

```{python}
np.argmin(dists)
```

<br>

The distance between the query point and closest city is:

```{python}
dists[np.argmin(dists)].item()
```


:::{.notes} 
Next, let’s find the distances to a given query point. 

Before we were calculating the distances between all the cities in our training dataset to all other cities in the same set.

But what if instead, we are given this new query point which does not occur in our training data.  

So, suppose we have the query point with a longitude value of -80 and a latitude value of 25.

We want to find the training example that's most similar to this query point.  

How can we do that? 

First, we calculate the distances from a credit point to all examples in our training set.

We are showing the distances of our query point to the first five cities in our training data. 

Next, we find out which city from our training data the query point is closest to.

It turns out that the city at index 147 is close to our point with the Euclidean distance between the two equal to 3.838.
:::

---



```{python}
from sklearn.neighbors import NearestNeighbors
nn = NearestNeighbors(n_neighbors=1)
nn.fit(train_df[['longitude', 'latitude']]);
nn.kneighbors([[-80, 25]])
```

:::{.notes} 
We use Sklearn's `NearestNeighbors` function to get the closest example and the distance between the query point and the closest example. 

First, we create our “class” object (we can specify the number of closest neighbours we wish to find), we train on it, and then we can pass our query example to our object to return the closest number of examples along with the distances.

And we could also extend it to points in multi-dimensional space.

All this matches our intuition of "distance" in the real world.
:::

---



```{python}
pokemon_df = pd.read_csv("data/pokemon.csv")
X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df[['legendary']]
X_train, X_test, y_train,  y_test = train_test_split(X, y, test_size=0.2, random_state=123)

X_train.head()
```

:::{.notes}
Let's find the nearest neighbours in our Pokémon dataset. 
:::

---

```{python}
dists = euclidean_distances(X_train[:3])
dists
```

<br>

```{python}
dists[0,2]
```

<br>

```{python}
nn = NearestNeighbors(n_neighbors=1)
nn.fit(X_train);
nn.kneighbors(X_test.iloc[[1]])
```

<br>

```{python}
X_test.to_numpy().shape
```

:::{.notes}
The distance between Pokémon zero and Pokémon 2 can be found using the indexing of `dists[0,2]`.

We can find the most similar Pokemon from our training data to Pokemon 1 from the test set using the `NearestNeighbors` function from the Sklearn library. 
:::

---

```{python}
# | eval: false
nn = NearestNeighbors(n_neighbors=5)
nn.fit(X_train);
nn.kneighbors(X_test.iloc[1])
```

```out
ValueError: Expected 2D array, got 1D array instead:
array=[605  55  55  85  55  30 255 335   5].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
```
<br>

```{python}
X_test.iloc[1].shape
```

```{python}
X_test.iloc[[1]].shape
```

<br>

```{python}
nn = NearestNeighbors(n_neighbors=5)
nn.fit(X_train);
nn.kneighbors(X_test.iloc[[1]])
```


:::{.notes} 
Now let’s find the 5 most similar Pokémon from the training data to our test Pokémon. 

We need to be careful here though because we need to make sure we pass in a 2D NumPy array as an input.

We can see the top 5 most similar Pokémon to our test example. 
:::


# Let’s apply what we learned!