---
format: html
---

<script src='../../src/quiz.js'></script>

# 2.1. Exercises

## Calculating Distances

```
u = np.array([5, 0, 22, -11])
v = np.array([-1, 0, 19, -9])
```

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'Given the above 2 feature vectors, what is the Euclidean distance between the following two feature vectors?',
        {
        '49': 'You forgot to square root!',
        '7': '',
        '6': 'Not quite there.',
        '36': 'Close but you have the target value in the feature vector.',
        },
        '7',
    );
</script>

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'We have collected a third vector <code>w</code>.',
        {
        'u and w': 'The distance between <code>u</code> and <code>w</code> is 10. Have you checked the other yet?',
        'u and v': 'The distance between <code>u</code> and <code>v</code> is 7. Have you checked the other yet?',
        'v and w': '',
        'They are equally distanced from one another': 'The distance between <code>u</code> and <code>w</code> is 10 and the distance between <code>u</code> and <code>v</code> is 7 so they cannot be the same distance from one another.',
        },
        'v and w',
    );
</script>

## Distance True or False

<div id='mcq3'></div>
<script>
    generateQuiz(
        'mcq3',
        'Question 1',
        'Euclidean distance will always have a positive value..',
        {
        'True': 'Yes! We are squaring all the differences which means that distance can only be a positive value.',
        'False': 'Take a look at the equation we use to calculate Euclidean distance.',
        },
        'True',
    );
</script>

<br>

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_


## Calculating Euclidean Distance Step by Step

Let's calculate the Euclidean distance between 2 examples in the Pokémon dataset without using Scikit-learn. 

```{pyodide}
import pandas as pd
from math import sqrt

# Loading in the data
pokemon_df = pd.read_csv('data/pokemon.csv')
pokemon_df
```

**Tasks:**  

- Subtract the first two pokemon feature vectors and save the result in an object named `sub_pk`.
- Square the difference and save it in an object named `sq_sub_pk`.
- Sum the squared difference from each dimension and save the result in an object named `sss_pk`.
- Finally, take the square root of the entire calculation and save it in an object named `pk_distance`.

```{pyodide}
#| setup: true
#| exercise: calculating_euclidean_distance_SBS

import pandas as pd
from math import sqrt
from src.utils import print_correct_msg

pokemon_df = pd.read_csv('data/pokemon.csv')
```


```{pyodide}
#| exercise: calculating_euclidean_distance_SBS
# Define X and y
X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df['legendary']


# Subtract the two first pokemon feature vectors
# Save it in an object name sub_pk
____ = ____

# Square the difference 
# Save it in an object named sq_sub_pk
____ = ____

# Sum the squared difference from each dimension 
# Save the result in an object named sss_pk
____ = ____

# Finally, take the square root of the entire calculation 
# Save it in an object named pk_distance
____ = ____

____
```

```{pyodide}
#| exercise: calculating_euclidean_distance_SBS
#| check: true

X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df['legendary']

solution = sqrt(((X.iloc[1] - X.iloc[0]) ** 2).sum())

assert round(result, 2) == round(solution, 2)
print_correct_msg()
```

:::: { .hint exercise="calculating_euclidean_distance_SBS"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you importing `sqrt` from the `math` library?
- Are you using `X.iloc[1] - X.iloc[0]` to subtract the first 2 Pokémon feature vectors?
- Are you using `**2` to square the difference??
- Are you using `.sum()` to sum the differences?
- Are you using `sqrt()` to square root the sum of squared differences?

:::
::::

:::: { .solution exercise="calculating_euclidean_distance_SBS" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Define X and y
X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df['legendary']


# Subtract the two first pokemon feature vectors 
# Save it in an object name sub_pk
sub_pk = X.iloc[1] - X.iloc[0]

# Square the difference 
# Save it in an object named sq_sub_pk
sq_sub_pk = sub_pk ** 2

# Sum the squared difference from each dimension 
# Save the result in an object named sss_pk
sss_pk = sq_sub_pk.sum()

# Finally, take the square root of the entire calculation 
# Save it in an object named pk_distance
pk_distance = sqrt(sss_pk)

pk_distance
```

:::
::::


## Calculating Euclidean Distance with Scikit-learn

This time, let's calculate the Euclidean distance between 2 examples in the Pokémon dataset using Scikit-learn. 

```{pyodide}
import pandas as pd
from sklearn.metrics.pairwise import euclidean_distances

# Loading in the data
pokemon_df = pd.read_csv('data/pokemon.csv')
pokemon_df
```

**Tasks:**

- Import the necessary library.
- Calculate the Euclidean distance of the first 2 Pokémon and save it in an object named pk_distance.

```{pyodide}
#| setup: true
#| exercise: calculating_euclidean_distance_SK

import pandas as pd
from sklearn.metrics.pairwise import euclidean_distances
from src.utils import print_correct_msg

pokemon_df = pd.read_csv('data/pokemon.csv')
```


```{pyodide}
#| exercise: calculating_euclidean_distance_SK
# Define X and y
X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df['legendary']

# Calculate the Euclidean distance of the first 2 pokemon 
# Save it in an object named pk_distance
____ =____
____
```

```{pyodide}
#| exercise: calculating_euclidean_distance_SK
#| check: true

X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df['legendary']

solution = euclidean_distances(X.iloc[:2])[0,1]
assert round(result, 2) == round(solution, 2)
print_correct_msg()
```

:::: { .hint exercise="calculating_euclidean_distance_SK"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you importing `euclidean_distances` from `sklearn.metrics.pairwise` 
- Are you making sure to use `euclidean_distances(X.iloc[:2])`
- Are you selecting the right value from the array using `[0,1]`

:::
::::

:::: { .solution exercise="calculating_euclidean_distance_SK" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Define X and y
X = pokemon_df.drop(columns = ['deck_no', 'name','total_bs', 'type', 'legendary'])
y = pokemon_df['legendary']

# Calculate the Euclidean distance of the first 2 pokemon 
# Save it in an object named pk_distance
pk_distance = euclidean_distances(X.iloc[:2])[0,1]

pk_distance
```

:::
::::