---
format: revealjs
title: Tabular Data and Terminology
title-slide-attributes:
  data-notes: |

---

```{python}
#  | echo: false
%run src/utils.py
```

## Terminology

Here is some basic terminology used in ML:

- **examples** = rows 
- **features** = inputs
- **targets** = outputs
- **training** = learning = fitting

![](../../../static/module1/sup-ml-terminology.png){fig-alt:"Supervised machine learning terminology" fig-align="center" width="90%"}


:::{.notes}
In the supervised machine learning paradigm, we have input data and an output. We feed our input to a machine learning algorithm. 

The question is how do we effectively represent this input?

Is there a specific required format for our data so that we can pass it to machine learning algorithms.<br>
- YES! In supervised machine learning, we typically work with **tabular data**.<br>

Here is a toy example of tabular data. 

The task here is to predict the `quiz2` grade given all this information.<br>
- Rows are ***examples***<br>
- Columns are ***features*** and one of the columns is typically the ***target***.<br>
- Features are relevant characteristics of the problem (usually suggested by experts).<br>
- To a machine, column names (features) have no meaning. Only feature values and how they vary across examples mean something.<br> 
- **Training** a model can also be called learning or fitting a model.<br>

All of these will be used in the course so it's important to get familiar with the vocabulary now. 

You will see a lot of variable terminology in machine learning and statistics and sometimes they can be confusing. See the MDS terminology resource <a href="https://ubc-mds.github.io/resources_pages/terminology/" target="_blank">here</a> to clear up any confusions.
:::

---

## Terminology

### Example 1: Tabular data for the housing price prediction problem
```{python}
df = pd.read_csv("data/kc_house_data.csv")
df.head(3)

```



```{python}
df.shape
```


:::{.notes}
Let's look at some examples of terminology:  

Let's go back to our housing price prediction problems. 
In this particular example, there are 18 features and 21613 examples.

Our target column is the `price` column. 
:::

---

### Example 2: Tabular data for quiz2 classification problem
```{python}
classification_df = pd.read_csv("data/quiz2-grade-toy-classification.csv")
classification_df.head(3)
```

```{python}
classification_df.shape
```


:::{.notes}
Here is another example.

This is our toy quiz2 classification data. The target here is `quiz2`. Our task is to predict whether a student gets an A+ or not A+ in quiz2. 

Since this is a toy dataset. We only have 21 examples and 7 different features with our target column being `quiz2`.
:::

---

```{python}
X = classification_df.drop(columns=["quiz2"])
y = classification_df["quiz2"]
X.head()
```


```{python}
y.head()
```


:::{.notes}
In order to train a model, we need to separate our data into features and the target. 

We save our features which are columns `ml_experience` to `quiz1` in an object named `X`. 

Our target  column is `quiz2`  and gets saved in an object named `y`. 

We will explain why we do this in the next set of slides. 
:::

# Letâ€™s apply what we learned!
