---
format:
  live-html
resources:
  - ../utils.py
  - ../data
---

# 4.1. Exercises

## Building a Model

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_

Let's start by building a baseline model using DummyClassifier() on the candybars dataset.

```{pyodide}
import pandas as pd
from sklearn.dummy import DummyClassifier

candybar_df = pd.read_csv('data/candybars.csv')
```

**Tasks:**  

- Build a baseline model using `DummyClassifier()`  and `most_frequent` for the `strategy` argument. Save this in an object named `model`. 
- Fit your model and then predict on the target column. 
- What is the accuracy of the model to 2 decimal places? Save this in the object `accuracy`.

```{pyodide}
#| setup: true
#| exercise: building_a_model

import pandas as pd
from sklearn.dummy import DummyClassifier
from utils import assert_accuracy_almost

candybar_df = pd.read_csv('data/candybars.csv')
```


```{pyodide}
#| exercise: building_a_model
# Define X and y
X = candybar_df.loc[:, 'chocolate':'multi']
y = candybar_df['availability']

# Create a model
model = ____

# Fit your data 
____

# Predict the labels of X
____

# The model accuracy
accuracy = round(____, 2)

accuracy
```

```{pyodide}
#| exercise: building_a_model
#| check: true

X = candybar_df.loc[:, 'chocolate':'multi']
y = candybar_df['availability']

model = DummyClassifier(strategy="most_frequent")
model.fit(X,y)
model.predict(X)

solution = round(model.score(X,y), 2)

assert_accuracy_almost(solution, result)
```

:::: { .hint exercise="building_a_model"}
::: { .callout-note collapse="false"}

## Hint 1

- Are using `DummyClassifier(strategy="most_frequent")`?
- Are you using the model named `model`?
- Are you calling `.fit(X,y)` on your model?
- Are you using `model.score(X,y)` to find the accuracy?
:::
::::

:::: { .solution exercise="building_a_model" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Define X and y
X = candybar_df.loc[:, 'chocolate':'multi']
y = candybar_df['availability']

# Create a model
model = DummyClassifier(strategy="most_frequent")

# Fit your data 
model.fit(X,y)

# Predict the labels of X
model.predict(X)

# The model accuracy
accuracy = round(model.score(X,y), 2)

accuracy
```

:::
::::