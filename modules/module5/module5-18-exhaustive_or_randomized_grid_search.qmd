---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 5.1. Exercises

## Exhaustive or Randomized Grid Search

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'Which method will attempt to find the optimal hyperparameter for the data by searching every combination possible of hyperparameter values given?',
        {
        'Exhaustive Grid Search (<code>GridSearchCV</code>)': '',
        'Randomized Grid Search (<code>RandomizedSearchCV</code>)': 'If we are searching every combination, is it still randomized?',
        'Both': 'One of these search types is correct but not both.',
        },
        'Exhaustive Grid Search (<code>GridSearchCV</code>)',
    );
</script>

## Hyperparameter Quick Questions

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 1',
        'If I want to search for the most optimal hyperparameter values among 3 different hyperparameters each with 3 different values how many trials of cross-validation would be needed?',
        {
        '6': 'Each hyperparameter would be checked with each value. The calculation would be 3 * 3 * 3.',
        '9': 'Each hyperparameter would be checked with each value. The calculation would be  3 * 3 * 3.',
        '27': 'Each hyperparameter would be checked with each value. The calculation would be  3 * 3 * 3. In this case, it would be 3 * 3 * 3 =27',
        '81': 'Each hyperparameter would be checked with each value. The calculation would be  3 * 3 * 3.',
        },
        '27',
    );
</script>

<div id='mcq3'></div>
<script>
    generateQuiz(
        'mcq3',
        'Question 2',
        'Automated hyperparameter optimization can only be used for multiple hyperparameters.',
        {
        'True': 'Grid search can be used for a single parameter too. However, now itâ€™s just searching in 1 dimension.',
        'False': 'Great work!',
        },
        'False',
    );
</script>

## Using Automated Hyperparameter Optimization in Action!

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_

Now that we have built a pipeline in the last interactive exercises, let's pair that with grid search to optimize our hyperparameters. 

```{pyodide}
import pandas as pd
from sklearn.model_selection import train_test_split, cross_validate
from sklearn.neighbors import KNeighborsClassifier
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

# Loading in the data
bball_df = pd.read_csv('data/bball.csv')
bball_df = bball_df[(bball_df['position'] =='G') | (bball_df['position'] =='F')]
bball_df
```

**Tasks:**

- Using the pipeline provided, create a grid of parameters to search over named `param_grid`. Search over the values 1, 5, 10, 20, 30, 40, and 50 for the hyperparameter `n_neighbors` and 'uniform' and 'distance' for the hyperparameter `weights` (make sure to call them appropriately). 
- Use `GridSearchCV` to hyper-parameter tune using cross-validate equal to 10 folds. Make sure to specify the arguments `verbose=1` and `n_jobs=-1`. Name the object `grid_search`. 
- Find the best hyperparameter values and save them in an object named `best_hyperparams`. Make sure to print these results.
- Lastly, score your model on the test set and save your results in an object named `bb_test_score`.

```{pyodide}
#| setup: true
#| exercise: using_automated_hyperparameter_optimization
import pandas as pd
from sklearn.model_selection import train_test_split, cross_validate
from sklearn.neighbors import KNeighborsClassifier
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from src.utils import assert_accuracy_almost

bball_df = pd.read_csv('data/bball.csv')
bball_df = bball_df[(bball_df['position'] =='G') | (bball_df['position'] =='F')]
```


```{pyodide}
#| exercise: using_automated_hyperparameter_optimization
# Define X and y
X = bball_df.loc[:, ['height', 'weight', 'salary']]
y = bball_df['position']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=7)

# Build a pipeline named bb_pipe
bb_pipe = Pipeline(
            steps=[("imputer", SimpleImputer(strategy="median")),
                   ("scaler", StandardScaler()),
                   ("knn", KNeighborsClassifier())])

# Build a grid of the parameters you wish to search. 
____ = ____

# Conduct grid search with 10 fold cross-validation
____ = ____

# Fit your pipeline with grid search 
____.____

# Save the best hyperparameter values in an object named `best_hyperparams`
____ = ____

# Print best_hyperparams
____

# Score your model on the test set 
# Save your results in an object named `bb_test_score`
____ = ____

# Display your score 
____
```

```{pyodide}
#| exercise: using_automated_hyperparameter_optimization
#| check: true
X = bball_df.loc[:, ['height', 'weight', 'salary']]
y = bball_df['position']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=7)

bb_pipe = Pipeline(
            steps=[("imputer", SimpleImputer(strategy="median")),
                   ("scaler", StandardScaler()),
                   ("knn", KNeighborsClassifier())])
param_grid = {
    "knn__n_neighbors" : [1, 5, 10, 20, 30, 40, 50],
    "knn__weights" : ['uniform', 'distance']
}

grid_search = GridSearchCV(bb_pipe, param_grid, cv=10, verbose=1, n_jobs=-1)
grid_search.fit(X_train, y_train)
best_hyperparams = grid_search.best_params_
solution = grid_search.score(X_test, y_test)

assert_accuracy_almost(solution, result)
```

:::: { .hint exercise="using_automated_hyperparameter_optimization"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you specifying `knn__n_neighbors` and `knn__weights` in `param_grid` and specifying the hyperparameter values in a list?
- Are you using `GridSearchCV(bb_pipe, param_grid, cv=10, verbose=1, n_jobs=-1)` and remembering to fit it?
- Are you using `grid_search.best_params_` to find the most optimal hyperparameter values?
- Are you using `grid_search.score(X_test, y_test)` to calculate your test score?

:::
::::

:::: { .solution exercise="using_automated_hyperparameter_optimization" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Define X and y
X = bball_df.loc[:, ['height', 'weight', 'salary']]
y = bball_df['position']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=7)

# Build a pipeline named bb_pipe
bb_pipe = Pipeline(
            steps=[("imputer", SimpleImputer(strategy="median")),
                   ("scaler", StandardScaler()),
                   ("knn", KNeighborsClassifier())])

# Build a grid of the parameters you wish to search. 
param_grid = {
    "knn__n_neighbors" : [1, 5, 10, 20, 30, 40, 50],
    "knn__weights" : ['uniform', 'distance']
}

# Conduct grid search with 10 fold cross-validation
grid_search = GridSearchCV(bb_pipe, param_grid, cv=10, verbose=1, n_jobs=-1)

# Fit your pipeline with grid search 
grid_search.fit(X_train, y_train)

# Save the best hyperparameter values in an object named best_hyperparams
best_hyperparams = grid_search.best_params_

# Print best_hyperparams
print(best_hyperparams)

# Score your model on the test set 
# Save your results in an object named `bb_test_score`
bb_test_score = grid_search.score(X_test, y_test)

# Display your score 
bb_test_score
```

:::
::::

<br>

<div id='mcq4'></div>
<script>
    generateQuiz(
        'mcq4',
        'Question 1',
        'How many times is a model trained in the problem above?',
        {
        '9': 'Think multiplications instead of addition.',
        '14': 'This is how many times cross-validation is called.',
        '140': '',
        '141': 'Are you counting somewhere where we are not?',
        },
        '140',
    );
</script>

<div id='mcq5'></div>
<script>
    generateQuiz(
        'mcq5',
        'Question 2',
        'What was the optimal value for the hyperparameter <code>weights</code>?',
        {
        'uniform': '',
        'distance': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        },
        'uniform',
    );
</script>

<div id='mcq6'></div>
<script>
    generateQuiz(
        'mcq6',
        'Question 3',
        'What is the optimal value for the hyperparameter <code>n_neighbors</code>?',
        {
        '1': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        '5': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        '10': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        '20': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        '30': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        '40': 'You got it!',
        '50': 'Are you sure? Take a look at what <code>grid_search.best_params_</code> returns.',
        },
        '40',
    );
</script>
