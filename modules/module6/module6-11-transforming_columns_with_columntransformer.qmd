---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 3.1. Exercises

## Transforming Columns with ColumnTransformer

Refer to the dataframe to answer the following question.
```
       colour   location    shape   water_content  weight
0       red      canada      NaN         84          100
1     yellow     mexico     long         75          120
2     orange     spain       NaN         90          NaN
3    magenta     china      round        NaN         600
4     purple    austria      NaN         80          115
5     purple    turkey      oval         78          340
6     green     mexico      oval         83          NaN
7      blue     canada      round        73          535
8     brown     china        NaN         NaN        1743  
9     yellow    mexico      oval         83          265
```

<br>

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'How many categorical columns are there and how many numeric?',
        {
        '5 categoric columns and 0 numeric columns': 'There are some numeric columns.',
        '2 categoric columns and 3 numeric columns': 'Are you missing a categorical columns?',
        '3 categoric columns and 2 numeric columns': '',
        '1 categoric columns and 4 numeric columns': 'Are you counting numerical columns that I am not?',
        },
        '3 categoric columns and 2 numeric columns',
    );
</script>

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'What transformations are being done to both numeric and categorical columns?',
        {
        'Scaling': 'This is used on numeric columns.',
        'Imputation': '',
        'One-hot encoding': 'This is only used on categorical columns.',
        'Pipeline': 'Pipeline isnâ€™t a transformer.',
        },
        'Imputation',
    );
</script>

## Transforming True or False

<div id='mcq3'></div>
<script>
    generateQuiz(
        'mcq3',
        'Question 1',
        'If there are missing values in both numeric and categorical columns, we can specify this in a single step in the main pipeline.',
        {
        'True': 'We specify the transformation in each column type pipeline before we use them as inputs for <code>ColumnTransformer</code>.',
        'False': 'Nailed it!',
        },
        'False',
    );
</script>

<div id='mcq4'></div>
<script>
    generateQuiz(
        'mcq4',
        'Question 2',
        'If we do not specify <code>remainder="passthrough"</code> as an argument in <code>ColumnTransformer</code>, the columns not being transformed will be dropped .',
        {
        'True': 'You got it! Without this, any columns left alone will be removed from your features.',
        'False': 'Are you certain? Slide 7 has some information regarding this.',
        },
        'True',
    );
</script>


## Your Turn with Column Transforming

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_


Let's now start doing transformations and working with them with our basketball dataset. 

We've provided you with the numerical and categorical features, it's your turn to make a pipeline for each and then use `ColumnTransformer` to transform them. 

We have a regression problem this time where we are attempting to predict a player's salary.

```{pyodide}
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_validate
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsRegressor

# Loading in the data
bball_df = pd.read_csv('data/bball_imp.csv').dropna(subset=['salary'])
bball_df
```

**Tasks:**

- Create a pipeline for the numeric features. It should have the first step as simple imputation using `strategy="median"` and the second step should be using `StandardScaler`.  Name this pipeline `numeric_transformer`.
- Create a pipeline for the categorical features. It should also have 2 steps. The first is imputation using `strategy="most_frequent"`. The second step should be one-hot encoding with `handle_unknown="ignore"`. Name this pipeline `categorical_transformer`. 
- Make your column transformer named `col_transformer` and specify the transformations on `numeric_features` and `categorical_features` using the appropriate pipelines you build above. 
-Create a main pipeline named `main_pipe` which preprocesses with `col_transformer` followed by building a `KNeighborsRegressor` model.
- The last step is performing cross-validation using our pipeline.

```{pyodide}
#| setup: true
#| exercise: your_turn_with_column_transforming
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_validate
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsRegressor
from src.utils import print_correct_msg

bball_df = pd.read_csv('data/bball_imp.csv').dropna(subset=['salary'])
```


```{pyodide}
#| exercise: your_turn_with_column_transforming
# Split the dataset
df_train, df_test = train_test_split(bball_df, test_size=0.2, random_state=7)

X_train = df_train[["weight", "height", "draft_year", "draft_round",
                     "draft_peak", "team", "position", "country"]]
X_test = df_test[["weight", "height", "draft_year", "draft_round",
                     "draft_peak", "team", "position", "country"]]
y_train = df_train['salary']
y_test = df_test['salary']


# Split the numeric and categorical features 
numeric_features = [ "weight",
                     "height",
                     "draft_year",
                     "draft_round",
                     "draft_peak"]

categorical_features = ["team", "position", "country"]

# Build a numeric pipeline
____ = ____(
    steps=[(____, ____), 
           (____, ____)]
)

# Build a categorical pipeline
____ = ____(
    steps=[(____, ____),
           (, ____)]
)

# Build a column transformer
____ = ____(
    transformers=[
        (____, ____, ____),
        (____, ____, ____)
    ] 
)

# Build a main pipeline
____ = ____(
    steps=[
        (____, ____),
        (____, ____)])

# Cross validate
scores = cross_validate(____, X_train, y_train, return_train_score=True)
pd.DataFrame(scores)
```

```{pyodide}
#| exercise: your_turn_with_column_transforming
#| check: true
assert result.shape == (5,4), "We want to view the scores in a DataFrame."
assert "test_score" in result.columns, "There should be a column called test_score."
assert "train_score" in result.columns, "There should be a column called train_score."

assert min(result['test_score']) > 0.20 and max(result['test_score']) < 0.50, "The range of your test scores is incorrect. Are you calling the cross_validate function?"
assert min(result['train_score']) > 0.57 and max(result['train_score']) < 0.65, "The range of your training scores is incorrect. Are you calling the cross_validate function?"

print_correct_msg()
```

:::: { .hint exercise="your_turn_with_column_transforming"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you using `SimpleImputer(strategy="median")` for numerical imputation? 
- Are you naming your steps?
- Are you using `SimpleImputer(strategy="most_frequent")` for categorical imputation?
- Are you using one-hot encoding?
- Are you naming the steps in `ColumnTransformer` and specifying `numeric_transformer` with `numeric_features` and `categorical_transformer` with `categorical_features`?
- Is the first step in your main pipeline calling `col_transformer`?
- Are you calling `main_pipe` in `cross_validate()`?

:::
::::

:::: { .solution exercise="your_turn_with_column_transforming" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Split the dataset
df_train, df_test = train_test_split(bball_df, test_size=0.2, random_state=7)

X_train = df_train[["weight", "height", "draft_year", "draft_round",
                     "draft_peak", "team", "position", "country"]]
X_test = df_test[["weight", "height", "draft_year", "draft_round",
                     "draft_peak", "team", "position", "country"]]
y_train = df_train['salary']
y_test = df_test['salary']


# Split the numeric and categorical features 
numeric_features = [ "weight",
                     "height",
                     "draft_year",
                     "draft_round",
                     "draft_peak"]

categorical_features = ["team", "position", "country"]

# Build a numeric pipeline
numeric_transformer = Pipeline(
    steps=[("imputer", SimpleImputer(strategy="median")), 
           ("scaler", StandardScaler())]
)

# Build a categorical pipeline
categorical_transformer = Pipeline(
    steps=[("imputer", SimpleImputer(strategy="most_frequent")),
           ("onehot", OneHotEncoder(handle_unknown="ignore"))]
)

# Build a column transformer
col_transformer = ColumnTransformer(
    transformers=[
        ("numeric", numeric_transformer, numeric_features),
        ("categorical", categorical_transformer, categorical_features)
    ] 
)

# Build a main pipeline
main_pipe = Pipeline(
    steps=[
        ("preprocessor", col_transformer),
        ("reg", KNeighborsRegressor())])

# Cross validate
scores = cross_validate(main_pipe, X_train, y_train, return_train_score=True)
pd.DataFrame(scores)
```

:::
::::